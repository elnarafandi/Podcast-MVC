@model HomeVM



@{
    ViewData["Title"] = "Home Page";
}





<main>
    <section id="search">
        <div class="area">
            <div class="info">
                <p>Discover your favorite podcasters, podcasts and episodes</p>
            </div>
            <div class="search">
                <form asp-controller="Podcast" asp-action="Search" method="get">
                    <input type="text" name="podcastTitle" placeholder="Search..." />
                    <button type="submit"><i class="bi bi-search"></i></button>
                </form>
            </div>
        </div>
    </section>
    <section id="parameters-filter">
        <div class="my-container">
            <div class="icons">
                <div class="left"><i class="bi bi-list" id="toggle-icon"></i></div>
                <div class="right">
                    <p>Recommended For You</p>
                </div>
            </div>
            <div class="all">
                <div class="parameters">
                    <div class="list">
                        <ul class="main-ul">
                            <li class="play-li">
                                <div class="p-name">
                                    <div class="icon-name"><i class="bi bi-collection-fill"></i><p>Playlist</p></div>

                                    <button type="button" class="btn btn-primary create" data-bs-toggle="modal" data-bs-target="#exampleModal">
                                        <i class="bi bi-plus-lg"></i>
                                    </button>
                                    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h1 class="modal-title fs-5" id="exampleModalLabel">Create playlist</h1>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                </div>
                                                <div class="modal-body">
                                                    <form action="/create-playlist" method="post">
                                                        @Html.AntiForgeryToken()
                                                        
                                                        <div class="mb-3">
                                                            <input type="text"
                                                                   class="form-control"
                                                                   id="playlistName"
                                                                   name="playlist_name"
                                                                   placeholder="Məsələn: Mənim Favorilərim"
                                                                   required>
                                                        </div>

                                                        
                                                        <button type="submit" class="btn btn-primary w-100">
                                                            <i class="bi bi-plus-circle"></i> Create Playlist
                                                        </button>
                                                    </form>
                                                </div>


                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <ul class="child-ul">
                                    @foreach(var playlist in Model.Playlists)
                                    {
                                        <li>
                                            <div class="name"><a asp-controller="Playlist" asp-action="Detail" asp-route-id="@playlist.Id"><p>@playlist.Name</p></a></div>
                                            <div class="delete">
                                                <form asp-controller="Playlist" asp-action="DeletePlaylist" method="post" asp-route-id="@playlist.Id">
                                                    <button type="submit"><i class="bi bi-trash"></i></button>
                                                </form>
                                            </div>
                                        </li>
                                    }

                                </ul>
                            </li>
                            <li class="sub-li">
                                <p><i class="bi bi-file-plus-fill"></i>Followed Podcasts</p>
                                <ul class="child-ul">
                                    @if (Model.FollowedPodcasts.Any())
                                    {
                                        @foreach (var followedPodcast in Model.FollowedPodcasts)
                                        {
                                            <li>
                                                <div class="image"><a asp-controller="Podcast" asp-action="Detail" asp-route-id="@followedPodcast.Id"><img src="~/assets/images/podcasts/@followedPodcast.Image" alt=""></a></div>
                                                <div class="name"><a asp-controller="Podcast" asp-action="Detail" asp-route-id="@followedPodcast.Id"><p>@followedPodcast.Title</p></a></div>
                                            </li>
                                        }
                                    }
                                </ul>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="podcasts">
                    <div class="all-podcasts">
                        <partial name="_PodcastHomePartial" model="@Model" />
                    </div>

                    <div class="pagination">

                        @if (Model.TotalPages > 1)
                        {
                            @if (Model.CurrentPage > 1)
                            {
                                <a href="javascript:void(0);" class="page-btn prev" data-page="@Model.CurrentPage - 1">
                                    <i class="bi bi-caret-left-fill"></i>
                                </a>
                            }
                            else
                            {
                                <button class="page-btn prev" disabled>
                                    <i class="bi bi-caret-left-fill"></i>
                                </button>
                            }

                            <span class="page-numbers">
                                @for (int i = 1; i <= Model.TotalPages; i++)
                                {
                                    <button class="page-btn @(i == Model.CurrentPage ? "active" : "")" data-page="@i">
                                        @i
                                    </button>
                                }
                            </span>

                            @if (Model.CurrentPage < Model.TotalPages)
                            {
                                <a href="javascript:void(0);" class="page-btn next" data-page="@Model.CurrentPage + 1">
                                    <i class="bi bi-caret-right-fill"></i>
                                </a>
                            }
                            else
                            {
                                <button class="page-btn next" disabled>
                                    <i class="bi bi-caret-right-fill"></i>
                                </button>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section id="categories">
        <div class="my-container">
            <div class="section-name"><p>Enjoy Different Categories</p></div>
            <div class="all-categories">
                @foreach(var category in Model.PodcastCategories)
                {
                    @if (category.Podcasts.Any())
                    {
                        <a asp-controller="PodcastCategory" asp-action="Index" asp-route-id="@category.Id"><div class="category">@category.Name</div></a>
                    }
                }
            </div>
        </div>
    </section>
</main>


@* <script>
    document.addEventListener("DOMContentLoaded", function () {
        const pagination = document.querySelector(".pagination");

        pagination.addEventListener("click", function (e) {
            const btn = e.target.closest(".page-btn");
            if (!btn || btn.hasAttribute("disabled")) return;

            e.preventDefault();

            const page = btn.getAttribute("data-page");
            if (!page) return;

            fetch(`/Home/Index?page=${page}`, {
                headers: { "X-Requested-With": "XMLHttpRequest" }
            })
                .then(res => res.text())
                .then(html => {
                    document.querySelector(".all-podcasts").innerHTML = html;
                    updateActivePageBtn(page);
                    updatePrevNextButtons(page);
                })
                .catch(() => alert("Səhifə yüklənərkən xəta baş verdi."));
        });

        function updateActivePageBtn(currentPage) {
            currentPage = Number(currentPage);
            const allBtns = document.querySelectorAll(".pagination .page-btn");

            allBtns.forEach(btn => {
                btn.classList.remove("active");
                const btnPage = Number(btn.getAttribute("data-page"));
                if (btnPage === currentPage) {
                    btn.classList.add("active");
                }
            });
        }

        function updatePrevNextButtons(currentPage) {
            currentPage = Number(currentPage);
            const totalPages = @Model.TotalPages;

            const prevBtn = document.querySelector(".pagination .prev");
            const nextBtn = document.querySelector(".pagination .next");

            const prevIcon = prevBtn?.querySelector("i");
            const nextIcon = nextBtn?.querySelector("i");

            // Sol ox (prev)
            if (prevBtn) {
                if (currentPage <= 1) {
                    prevBtn.setAttribute("disabled", "disabled");
                    prevBtn.removeAttribute("href");
                    prevBtn.removeAttribute("data-page");
                    prevBtn.style.backgroundColor = "#f0f0f0";
                    if (prevIcon) prevIcon.style.color = "#6A0DAD";
                } else {
                    prevBtn.removeAttribute("disabled");
                    prevBtn.setAttribute("data-page", currentPage - 1);
                    prevBtn.setAttribute("href", "javascript:void(0);");
                    prevBtn.style.backgroundColor = "";
                    if (prevIcon) prevIcon.style.color = "";
                }
            }

            // Sağ ox (next)
            if (nextBtn) {
                if (currentPage >= totalPages) {
                    nextBtn.setAttribute("disabled", "disabled");
                    nextBtn.removeAttribute("href");
                    nextBtn.removeAttribute("data-page");
                    nextBtn.style.backgroundColor = "#f0f0f0";
                    if (nextIcon) nextIcon.style.color = "#6A0DAD";
                } else {
                    nextBtn.removeAttribute("disabled");
                    nextBtn.setAttribute("data-page", currentPage + 1);
                    nextBtn.setAttribute("href", "javascript:void(0);");
                    nextBtn.style.backgroundColor = "";
                    if (nextIcon) nextIcon.style.color = "";
                }
            }
        }

        const initialPage = document.querySelector(".page-btn.active")?.getAttribute("data-page") || 1;
        updatePrevNextButtons(initialPage);
    });
</script> *@

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const pagination = document.querySelector(".pagination");

        pagination.addEventListener("click", function (e) {
            const btn = e.target.closest(".page-btn");
            if (!btn || btn.hasAttribute("disabled")) return;

            e.preventDefault();

            const page = btn.getAttribute("data-page");
            if (!page) return;

            fetch(`/Home/Index?page=${page}`, {
                headers: { "X-Requested-With": "XMLHttpRequest" }
            })
                .then(res => res.text())
                .then(html => {
                    document.querySelector(".all-podcasts").innerHTML = html;
                    updateActivePageBtn(page);
                    updatePrevNextButtons(page);
                })
                .catch(() => alert("Səhifə yüklənərkən xəta baş verdi."));
        });

        function updateActivePageBtn(currentPage) {
            currentPage = Number(currentPage);
            const allBtns = document.querySelectorAll(".pagination .page-btn");

            allBtns.forEach(btn => {
                btn.classList.remove("active");
                const btnPage = Number(btn.getAttribute("data-page"));
                if (btnPage === currentPage) {
                    btn.classList.add("active");
                }
            });
        }

        function updatePrevNextButtons(currentPage) {
            currentPage = Number(currentPage);
            const totalPages = @Model.TotalPages;

            const prevBtn = document.querySelector(".pagination .prev");
            const nextBtn = document.querySelector(".pagination .next");

            const prevIcon = prevBtn?.querySelector("i");
            const nextIcon = nextBtn?.querySelector("i");

            // Sol ox (prev)
            if (prevBtn) {
                if (currentPage <= 1) {
                    prevBtn.setAttribute("disabled", "disabled");
                    prevBtn.removeAttribute("href");
                    prevBtn.removeAttribute("data-page");
                    prevBtn.style.backgroundColor = "#f0f0f0";
                    prevBtn.style.cursor = "not-allowed";
                    if (prevIcon) prevIcon.style.color = "#6A0DAD";
                } else {
                    prevBtn.removeAttribute("disabled");
                    prevBtn.setAttribute("data-page", currentPage - 1);
                    prevBtn.setAttribute("href", "javascript:void(0);");
                    prevBtn.style.backgroundColor = "";
                    prevBtn.style.cursor = "pointer";
                    if (prevIcon) prevIcon.style.color = "";
                }
            }

            // Sağ ox (next)
            if (nextBtn) {
                if (currentPage >= totalPages) {
                    nextBtn.setAttribute("disabled", "disabled");
                    nextBtn.removeAttribute("href");
                    nextBtn.removeAttribute("data-page");
                    nextBtn.style.backgroundColor = "#f0f0f0";
                    nextBtn.style.cursor = "not-allowed";
                    if (nextIcon) nextIcon.style.color = "#6A0DAD";
                } else {
                    nextBtn.removeAttribute("disabled");
                    nextBtn.setAttribute("data-page", currentPage + 1);
                    nextBtn.setAttribute("href", "javascript:void(0);");
                    nextBtn.style.backgroundColor = "";
                    nextBtn.style.cursor = "pointer";
                    if (nextIcon) nextIcon.style.color = "";
                }
            }
        }

        const initialPage = document.querySelector(".page-btn.active")?.getAttribute("data-page") || 1;
        updatePrevNextButtons(initialPage);
    });
</script>
