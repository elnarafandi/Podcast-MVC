@model PlaylistVM



<main>
    
    <section id="podcast-episodes">
        <div class="my-container">
            <div class="text-center border p-3" style="border: 2px solid #6A0DAD; border-radius: 8px; background-color: #F9F5FF;">
                <h5 style="color: #2D2D2D; font-size: 1.5rem; font-weight: 600;">
                    @Model.Playlist.Name
                </h5>
            </div>


            <div class="all">
          
                <div class="episodes">


                    @if (!Model.Playlist.PlaylistEpisodes.Any())
                    {
                        <div class="text-center d-flex align-items-center justify-content-center" style="height: 130px; color: #6c757d; font-size: 1.25rem; font-weight: normal;">
                            There are no episodes in this playlist yet.
                        </div>
                    }



                    @foreach (var playlistEpisode in Model.Playlist.PlaylistEpisodes)
                    {
                        <div class="episode">
                            <div class="img-title">
                                <div class="image"><a href=""><img src="~/assets/images/podcasts/@playlistEpisode.Episode.Image" alt=""></a></div>
                                <div class="number">
                                    <div class="title"><a href="">@playlistEpisode.Episode.Title</a></div>
                                    
                                </div>
                            </div>
                            <div class="description"><p>@playlistEpisode.Episode.Description</p></div>
                            <div class="guests">
                                @if (playlistEpisode.Episode.EpisodeGuests.Any())
                                {
                                    <div class="text"><p>Our guests:</p></div>
                                }
                                <div class="g-info">
                                    @foreach (var guest in playlistEpisode.Episode.EpisodeGuests)
                                    {
                                        <div class="member">
                                            <a asp-controller="Guest" asp-action="Detail" asp-route-id="@guest.Guest.Id"><img src="~/assets/images/home/@guest.Guest.Image" alt=""></a>
                                            <a class="name" asp-controller="Guest" asp-action="Detail" asp-route-id="@guest.Guest.Id">@guest.Guest.FirstName @guest.Guest.LastName</a>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="icons-play">
                                <div class="icons">

                                    <div class="delete">
                                        <form action="@Url.Action("DeleteEpisode", "Playlist")" method="POST">
                                            <input type="hidden" name="playlistId" value="@playlistEpisode.PlaylistId" />
                                            <input type="hidden" name="episodeId" value="@playlistEpisode.EpisodeId" />
                                            <button type="submit" class="btn btn-primary delete" style="background-color:white; color:red; border:none;">
                                                <i class="bi bi-dash-circle"></i>
                                            </button>
                                        </form>
                                    </div>

                                    @if (Model.User.PackageId == 3)
                                    {
                                        <div class="like-episode">
                                            <form method="post" class="like-form" data-episode-id="@playlistEpisode.Episode.Id">
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="btn btn-primary like like-btn">
                                                    <i class="bi @(Model.LikedEpisodeIds.Contains(playlistEpisode.Episode.Id) ? "bi-hand-thumbs-up-fill" : "bi-hand-thumbs-up")"></i>
                                                </button>
                                            </form>
                                            <span class="like-count" data-episode-id="@playlistEpisode.Episode.Id">@playlistEpisode.Episode.Likes.Count()</span>
                                        </div>
                                    }
                                </div>
                                <div class="play">
                                    <button onclick="playAudio('@playlistEpisode.Episode.Audio', this)">
                                        <i class="bi bi-play-circle-fill"></i>
                                    </button>
                                    <audio id="audio-@playlistEpisode.Episode.Id" controls>
                                        <source src="@Url.Content("~/audios/" + playlistEpisode.Episode.Audio)" type="audio/mp3">
                                        Sizin brauzeriniz audio elementini dəstəkləmir.
                                    </audio>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </section>
</main>


@* <script>
    function playAudio(audioSrc, button) {
        const episodeDiv = button.closest('.episode'); // Ən yaxın .episode konteynerini tapır
        const audioElement = episodeDiv.querySelector('audio'); // Onun içindəki audio elementini tapır
        const isPlaying = !audioElement.paused;

        // Bütün digər audio-ları dayandır
        document.querySelectorAll('audio').forEach(audio => {
            if (audio !== audioElement) {
                audio.pause();
                audio.previousElementSibling.innerHTML = '<i class="bi bi-play-circle-fill"></i>';
            }
        });

        if (isPlaying) {
            audioElement.pause();
            button.innerHTML = '<i class="bi bi-play-circle-fill"></i>';
        } else {
            audioElement.play();
            button.innerHTML = '<i class="bi bi-pause-circle-fill"></i>';
        }
    }

</script> *@



<script>
    // 🔊 Play/Pause funksiyası
    function playAudio(audioSrc, button) {
        const episodeDiv = button.closest('.episode');
        const audioElement = episodeDiv.querySelector('audio');
        const isPlaying = !audioElement.paused;

        document.querySelectorAll('audio').forEach(audio => {
            if (audio !== audioElement) {
                audio.pause();
                audio.previousElementSibling.innerHTML = '<i class="bi bi-play-circle-fill"></i>';
            }
        });

        if (isPlaying) {
            audioElement.pause();
            button.innerHTML = '<i class="bi bi-play-circle-fill"></i>';
        } else {
            audioElement.play();
            button.innerHTML = '<i class="bi bi-pause-circle-fill"></i>';
        }
    }

    // 👍 Like funksiyası
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".like-form").forEach(form => {
            form.addEventListener("submit", async function (e) {
                e.preventDefault();

                const episodeId = form.dataset.episodeId;
                const button = form.querySelector(".like-btn");
                const icon = button.querySelector("i");
                const span = document.querySelector(`.like-count[data-episode-id='${episodeId}']`);

                const token = document.querySelector("input[name='__RequestVerificationToken']").value;

                const formData = new FormData();
                formData.append("episodeId", episodeId);

                const response = await fetch("/Podcast/ToggleEpisodeLike", {
                    method: "POST",
                    headers: {
                        "RequestVerificationToken": token
                    },
                    body: formData
                });

                if (response.ok) {
                    const result = await response.json();

                    if (result.isLiked) {
                        icon.classList.remove("bi-hand-thumbs-up");
                        icon.classList.add("bi-hand-thumbs-up-fill");
                    } else {
                        icon.classList.remove("bi-hand-thumbs-up-fill");
                        icon.classList.add("bi-hand-thumbs-up");
                    }

                    span.textContent = result.likeCount;
                }
            });
        });
    });
</script>